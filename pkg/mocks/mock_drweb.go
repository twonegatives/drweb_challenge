// Code generated by MockGen. DO NOT EDIT.
// Source: drweb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	drweb "github.com/twonegatives/drweb_challenge/pkg/drweb"
	io "io"
	reflect "reflect"
)

// MockEncoder is a mock of Encoder interface
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method
func (m *MockEncoder) Encode(input []byte) []byte {
	ret := m.ctrl.Call(m, "Encode", input)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Encode indicates an expected call of Encode
func (mr *MockEncoderMockRecorder) Encode(input interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockEncoder)(nil).Encode), input)
}

// MockCallback is a mock of Callback interface
type MockCallback struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackMockRecorder
}

// MockCallbackMockRecorder is the mock recorder for MockCallback
type MockCallbackMockRecorder struct {
	mock *MockCallback
}

// NewMockCallback creates a new mock instance
func NewMockCallback(ctrl *gomock.Controller) *MockCallback {
	mock := &MockCallback{ctrl: ctrl}
	mock.recorder = &MockCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCallback) EXPECT() *MockCallbackMockRecorder {
	return m.recorder
}

// Invoke mocks base method
func (m *MockCallback) Invoke(args ...interface{}) {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Invoke", varargs...)
}

// Invoke indicates an expected call of Invoke
func (mr *MockCallbackMockRecorder) Invoke(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockCallback)(nil).Invoke), args...)
}

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockStorage) Save(f *drweb.File) (string, error) {
	ret := m.ctrl.Call(m, "Save", f)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockStorageMockRecorder) Save(f interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), f)
}

// Load mocks base method
func (m *MockStorage) Load(filename string) (*drweb.File, error) {
	ret := m.ctrl.Call(m, "Load", filename)
	ret0, _ := ret[0].(*drweb.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockStorageMockRecorder) Load(filename interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockStorage)(nil).Load), filename)
}

// Delete mocks base method
func (m *MockStorage) Delete(filename string) error {
	ret := m.ctrl.Call(m, "Delete", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageMockRecorder) Delete(filename interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), filename)
}

// Filepath mocks base method
func (m *MockStorage) Filepath(filename string) (string, error) {
	ret := m.ctrl.Call(m, "Filepath", filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filepath indicates an expected call of Filepath
func (mr *MockStorageMockRecorder) Filepath(filename interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filepath", reflect.TypeOf((*MockStorage)(nil).Filepath), filename)
}

// MockFileNameGenerator is a mock of FileNameGenerator interface
type MockFileNameGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockFileNameGeneratorMockRecorder
}

// MockFileNameGeneratorMockRecorder is the mock recorder for MockFileNameGenerator
type MockFileNameGeneratorMockRecorder struct {
	mock *MockFileNameGenerator
}

// NewMockFileNameGenerator creates a new mock instance
func NewMockFileNameGenerator(ctrl *gomock.Controller) *MockFileNameGenerator {
	mock := &MockFileNameGenerator{ctrl: ctrl}
	mock.recorder = &MockFileNameGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileNameGenerator) EXPECT() *MockFileNameGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockFileNameGenerator) Generate(input io.Reader, mimeType string) (string, error) {
	ret := m.ctrl.Call(m, "Generate", input, mimeType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate
func (mr *MockFileNameGeneratorMockRecorder) Generate(input, mimeType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockFileNameGenerator)(nil).Generate), input, mimeType)
}

// MockFilePathGenerator is a mock of FilePathGenerator interface
type MockFilePathGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockFilePathGeneratorMockRecorder
}

// MockFilePathGeneratorMockRecorder is the mock recorder for MockFilePathGenerator
type MockFilePathGeneratorMockRecorder struct {
	mock *MockFilePathGenerator
}

// NewMockFilePathGenerator creates a new mock instance
func NewMockFilePathGenerator(ctrl *gomock.Controller) *MockFilePathGenerator {
	mock := &MockFilePathGenerator{ctrl: ctrl}
	mock.recorder = &MockFilePathGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilePathGenerator) EXPECT() *MockFilePathGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockFilePathGenerator) Generate(filename string) (string, error) {
	ret := m.ctrl.Call(m, "Generate", filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate
func (mr *MockFilePathGeneratorMockRecorder) Generate(filename interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockFilePathGenerator)(nil).Generate), filename)
}
